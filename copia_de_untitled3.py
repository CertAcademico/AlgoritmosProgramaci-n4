# -*- coding: utf-8 -*-
"""Copia de Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wx1-XKO4-z2xTykJ40K-nzOgvvqt0dda

**Proyecto de algoritmos y programación**

        
*Se desea imprementar un programa para que un robot ayude a pasar la calle a personas con dificultades para movilizarse por la ciudad.*


1. **Importar las bibliotecas necesarias:**
   
   from gpiozero import DistanceSensor,Robot
   from time import sleep
   
 - En esta sección, importamos las bibliotecas GPIO Zero para controlar los pines GPIO y el sensor de distancia ultrasónico, así como la biblioteca sleep para pausas en el programa.



  - GPIO: Se refiere a los pines que pueden ser programados para funcionar como entradas o salidas digitales, permitiendo la interacción con componentes electrónicos externos.



  - Gpiocero: Es un nombre de variable o constante específico en el código que hace referencia a un pin GPIO en particular



 - "Sleep": Es una función que pausa la ejecución de un programa por un período de tiempo específico.



2. **Configurar el sensor de ultrasonido y los motores del robot:**
   
 robot = Robot(left=(4, 14), right=(17, 18))

   
   Aquí inicializamos el sensor de ultrasonido con los pines GPIO específicos y configuramos los motores del robot para su control.

3. **Definir la función principal para ayudar a cruzar:**
   
   def ayudar_a_cruzar():
       while True:
           distancia = sensor.distance * 100
           if distancia < 50:
               robot.stop()
               print("Esperando a peatones...")
               sleep(5)
           else:
               robot.forward()
               print("Caminando hacia la intersección...")
               sleep(1)
   
   En esta función, el robot verifica continuamente la distancia medida por el sensor de ultrasonido. Si la distancia es menor a 50 cm, el robot se detiene y espera 5 segundos para permitir que los peatones crucen. Si no hay peatones cercanos, el robot avanza hacia la intersección durante 1 segundo.

4. **Ejecutar la función principal y detener el robot al finalizar:**
   
   try:
       ayudar_a_cruzar()
   finally:
       robot.stop()
      
- "Try": S e utiliza para envolver un código que podría generar una excepción.
   
   Aquí llamamos a la función principal ayudar_a_cruzar() dentro de un bloque try y detenemos el robot al finalizar el programa, asegurándonos de que los motores se apaguen correctamente.


   ***Prototipo del robot***

   https://vm.tiktok.com/ZMMHtRQwQ/
"""

from gpiozero import DistanceSensor, Robot
from time import sleep

# Configurar el sensor de ultrasonido
sensor = DistanceSensor(echo=18, trigger=17)

# Configurar los motores del robot
robot = Robot(left=(4, 14), right=(17, 18))

# Función para controlar el comportamiento del robot
def ayudar_a_cruzar():
    while True:
        distancia = sensor.distance * 100  # Convertir la distancia a centímetros
        if distancia < 50:  # Si la distancia es menor a 50 cm, detener al robot
            robot.stop()
            print("Esperando a peatones...")
            sleep(5)  # Esperar 5 segundos para permitir que los peatones crucen
        else:  # Si no hay peatones cercanos, avanzar hacia la intersección
            robot.forward()
            print("Caminando hacia la intersección...")
            sleep(1)

try:
    ayudar_a_cruzar()  # Llamar a la función principal
finally:
    robot.stop()  # Detener el robot al finalizar el programa